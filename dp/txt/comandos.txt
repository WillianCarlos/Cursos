email ->  alexgrcol@hotmail.com

https://ide.c9.io/romefeller/hask0

git clone https://github.com/romefeller/ayesod

let m = mod 2
m 2
0

 let dobro = \x -> 2*x
*Aula5> dobro 2
4

map (2*) [8,7,5,2,10]  -- para cada um executa

[16,14,10,4,20]

map elimVogal ["JAVA", "PHP", "HASKELL"]
["JV","PHP","HSKLL"]

*Aula5> filter (>2) [7,2,0,1,9,-1] -- true fica, false sai
[7,9]

filter (\x ->  length x > 3) ["Java", "PHP","Haskell", "Python"]
["Java","Haskell","Python"]

filter (\x -> mod x 2 == 0) [1..200]
[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200]

-- cifrao equilave aos parenteses
dobro $ dobro (4+5) 
 filter (\x -> notElem x "AEIOUaeiou") "Fatec" 
"Ftc"

Aula6> foldl (\ soma v1 -> soma + v1) 0 [1,2,3,4,5]
15

foldl (\xs x -> xs+1) 0 [1,2,3,4,5,6]
6

id elemento neutro das funcoes


*Aula7> Segunda
Segunda dia de  Haskell
*Aula7> Segunda == Segunda
True
*Aula7>

Terca < Quarta
False

--------------------------------------------------------------------------------------------------------------------------------------------------
Monoide(Data.Monoid) 

Def: Dado um tipo m e uma operação binaria (<>):: m -> m, dizemos que (m , <>) é um monoide se satisfazer

(<>)mappend 

a-) Elemento neutro 
e <> m = m 
m <> e = m 
-- e = mempty

b-) Associatividade (a <> b) <> c = a <> (b<>c)

Exemplo:

m = Int
(<>) = +
mempty = 0

(5+3) + 2 =10
5 + (3+2) = 10

m = Int
(<>) = *
mempty = 1

(5*3) * 2 = 30
5 * (3*2) = 30

m = [a]  a = Char
(<>) =  (+ +)
mempty = []

([1,2] ++ [3,4]) ++ [5,6] = [1,2,3,4] ++ [5,6] = [1,2,3,4,5,6]
[1,2] ++ ([3,4] ++ [5,6]) = [1,2] ++ [3,4,5,6] = [1,2,3,4,5,6] 

mconcat junta tudo

--------------------------------------------------------
*Aula8> :t (Tripla "Ola" 5 "Mundo")
(Tripla "Ola" 5 "Mundo") :: Tripla [Char]

:t fmap length
fmap length :: Functor f => f [a] -> f Int

 fmap (2*) (Just 5)
Just 10

 fmap (2*) Nothing
Nothing

 safeDiv 10 2
Just 5.0

 fmap (2*) (safeDiv 10 2)
Just 10.0

-----------------------------------------------------------------------------------
Monads
em haskell é um type class de awd (* -> *) -> ghci. prim. Constraint
que contem os seguintes elementos:
 um functor m(kind 2)
 um elelmentro neutro (a -> m a)
 uma operação binaria join m(m a) -> m a, no haskell (>>=) :: m a -> (a -> m b) -> m b
 -----------------------------------------------------------------------
 
 dobro <$> [7+4]
 dobro $ 7+4
 
:t (<*>)